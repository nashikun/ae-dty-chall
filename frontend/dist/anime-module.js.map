{"version":3,"sources":["webpack:///./src/app/components/add-anime/add-anime.component.css","webpack:///./src/app/components/add-anime/add-anime.component.html","webpack:///./src/app/components/add-anime/add-anime.component.ts","webpack:///./src/app/components/anime/anime.component.css","webpack:///./src/app/components/anime/anime.component.html","webpack:///./src/app/components/anime/anime.component.ts","webpack:///./src/app/components/animes/animes.component.css","webpack:///./src/app/components/animes/animes.component.html","webpack:///./src/app/components/animes/animes.component.ts","webpack:///./src/app/guards/admin.guard.ts","webpack:///./src/app/modules/anime-routing.module.ts","webpack:///./src/app/modules/anime.module.ts"],"names":[],"mappings":"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","file":"anime-module.js","sourcesContent":["module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRkLWFuaW1lL2FkZC1hbmltZS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-card>\\n  <mat-card-header>\\n    <mat-card-title>\\n      Add Anime\\n    </mat-card-title>\\n  </mat-card-header>\\n  <form [formGroup]=\\\"addanimeForm\\\" (submit)=\\\"addAnime()\\\" autocomplete=\\\"on\\\">\\n    <div>\\n      <mat-form-field>\\n        <input matInput id=\\\"name\\\" formControlName=\\\"name\\\" placeholder=\\\"name\\\" name=\\\"name\\\" type=\\\"text\\\" required/>\\n        <mat-error *ngIf=\\\"addanimeForm.get('name').invalid\\\">Please add a name</mat-error>\\n      </mat-form-field>\\n    </div>\\n    <p></p>\\n    <p></p>\\n    <div>\\n      <mat-form-field>\\n        <textarea matInput formControlName=\\\"description\\\" rows=\\\"6\\\" placeholder=\\\"description\\\" required></textarea>\\n        <mat-error *ngIf=\\\"addanimeForm.get('description').invalid\\\">Please Enter a description</mat-error>\\n      </mat-form-field>\\n    </div>\\n    <p></p>\\n    <p></p>\\n    <div>\\n      <mat-form-field>\\n        <input  type=\\\"number\\\" matInput formControlName=\\\"episodes\\\" placeholder=\\\"episodes\\\" required/>\\n        <mat-error *ngIf=\\\"addanimeForm.get('episodes').invalid\\\">Please Enter the number of episodes</mat-error>\\n      </mat-form-field>\\n    </div>\\n    <p></p>\\n    <p></p>\\n    <div>\\n      <button mat-button (click)=\\\"Imginput.click(); $event.preventDefault()\\\">Image</button>\\n      <input #Imginput (change)=\\\"ImageUploader($event)\\\" type=\\\"file\\\" accept=\\\"image/*\\\" hidden=\\\"hidden\\\" required>\\n    </div>\\n    <mat-error *ngIf=\\\"addanimeForm.get('image').invalid && imageChanged\\\">Please Choose a Valid Image</mat-error>\\n    <img *ngIf=\\\"imageUrl && addanimeForm.get('image').valid\\\" [src]=\\\"imageUrl\\\" [alt]=\\\"addanimeForm.value.name\\\" required>\\n    <p></p>\\n    <p></p>\\n    <button mat-button [disabled]=\\\"addanimeForm.invalid\\\">Add Anime</button>\\n  </form>\\n</mat-card>\\n\\n\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AnimelistService} from '../../services/animelist.service';\nimport {AnimeService} from '../../services/anime.service';\nimport {Router} from '@angular/router';\nimport {ImageValidator} from '../../util/ImageValidator';\n\n\n@Component({\n  selector: 'app-add-anime',\n  templateUrl: './add-anime.component.html',\n  styleUrls: ['./add-anime.component.css']\n})\nexport class AddAnimeComponent implements OnInit {\n  imageUrl;\n  imageChanged = false;\n\n  constructor(private fb: FormBuilder,\n              private _animelistService: AnimelistService,\n              private _animeService: AnimeService,\n              private _router: Router\n  ) {\n  }\n\n  addanimeForm: FormGroup;\n\n  ngOnInit() {\n    this.addanimeForm = this.fb.group({\n      name: new FormControl(null, {\n        validators: [Validators.required],\n        // asyncValidators: [this.animevalidator.available.bind(this.animevalidator)]\n      }),\n      description: new FormControl(null, {validators: [Validators.required]}),\n      episodes: new FormControl(null, {validators: [Validators.required]}),\n      image: new FormControl(null, {validators: [Validators.required], asyncValidators: [ImageValidator]})\n    });\n  }\n\n  addAnime() {\n    this._animeService.addAnime(this.addanimeForm.value)\n      .subscribe((res) => {\n        this._router.navigate(['/animes', res.id]);\n      });\n  }\n\n  ImageUploader(event: Event) {\n    this.imageChanged = true;\n    event.preventDefault();\n    const image = (event.target as HTMLInputElement).files[0];\n    if (image) {\n      this.addanimeForm.patchValue({image: image});\n      this.addanimeForm.get('image').updateValueAndValidity();\n      const reader = new FileReader();\n      reader.readAsDataURL(image);\n      reader.onload = () => {\n        if (this.addanimeForm.get('image').valid) {\n          this.imageChanged = false;\n          this.imageUrl = reader.result;\n        }\n      };\n    }\n  }\n}\n","module.exports = \".spacer {\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9hbmltZS9hbmltZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBYztBQUNoQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYW5pbWUvYW5pbWUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zcGFjZXIge1xyXG4gIGZsZXg6IDEgMSBhdXRvO1xyXG59XHJcbiJdfQ== */\"","module.exports = \"<mat-card fxLayout=\\\"column\\\" fxLayoutGap=\\\"30px\\\">\\r\\n  <mat-card-header>\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n      <div><img [alt]=\\\"anime.name\\\" [src]=\\\"anime.image\\\" mat-card-xl-image></div>\\r\\n      <div>\\r\\n        {{anime.name}}\\r\\n        <p></p>\\r\\n        <!--Status Bar Start -->\\r\\n        <button (click)=\\\"Add()\\\" *ngIf=\\\"_auth.loggedIn() && !anime.status\\\" mat-button>Add</button>\\r\\n        <mat-icon color=\\\"primary\\\" svgIcon=\\\"star\\\"></mat-icon>\\r\\n        Score: {{anime.score}}\\r\\n        <p></p>\\r\\n        <div *ngIf=\\\"_auth.loggedIn()\\\">\\r\\n          <mat-icon *ngIf=\\\"anime.rating.rating != 'N/A'\\\" color=\\\"primary\\\" svgIcon=\\\"star\\\"></mat-icon>\\r\\n          <div *ngIf=\\\"anime.rating.rating =='N/A'\\\">\\r\\n            <mat-icon color=\\\"primary\\\" svgIcon=\\\"star_outline\\\"></mat-icon>\\r\\n          </div>\\r\\n          <mat-form-field>\\r\\n            <mat-select (selectionChange)=\\\"rateAnime()\\\" [(ngModel)]=\\\"anime.rating.rating\\\">\\r\\n              <mat-option *ngFor=\\\"let score of [1,2,3,4,5,6,7,8,9,10]\\\" [value]=\\\"score\\\">\\r\\n                {{score}}\\r\\n              </mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n          <div *ngIf=\\\"anime.status\\\">\\r\\n            <mat-form-field>\\r\\n              <input [(ngModel)]=\\\"anime.watchedEpisodes\\\" [defaultValue]=\\\"anime.watchedEpisodes\\\" [max]=\\\"anime.episodes\\\"\\r\\n                     label=\\\"episodes\\\" matInput\\r\\n                     min=\\\"0\\\" type=\\\"number\\\">\\r\\n            </mat-form-field>\\r\\n            / {{anime.episodes}}\\r\\n            <p></p>\\r\\n            <mat-form-field>\\r\\n              <mat-select [(value)]=\\\"anime.status\\\">\\r\\n                <mat-option value=\\\"Plan To Watch\\\">Plan To Watch</mat-option>\\r\\n                <mat-option value=\\\"Watching\\\">Watching</mat-option>\\r\\n                <mat-option value=\\\"Watched\\\">Watched</mat-option>\\r\\n                <mat-option value=\\\"Dropped\\\">Dropped</mat-option>\\r\\n                <mat-option value=\\\"On Hold\\\">On Hold</mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n            <button (click)=\\\"Update()\\\" mat-button>\\r\\n              Update\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n        <!--Status Bar End -->\\r\\n      </div>\\r\\n    </div>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content>\\r\\n    <div>\\r\\n      {{anime.description}}\\r\\n    </div>\\r\\n    <!--Reviews Start -->\\r\\n    <mat-accordion>\\r\\n      <mat-expansion-panel (afterExpand)=\\\"getReviews()\\\">\\r\\n        <mat-expansion-panel-header>\\r\\n          <mat-panel-title>\\r\\n            Reviews\\r\\n          </mat-panel-title>\\r\\n          <mat-panel-description>\\r\\n            {{anime.name}} reviews\\r\\n          </mat-panel-description>\\r\\n        </mat-expansion-panel-header>\\r\\n        <mat-card *ngIf=\\\"userReview.review && !editMode\\\">\\r\\n          <mat-card-header>\\r\\n            Your review of {{anime.name}}\\r\\n          </mat-card-header>\\r\\n          <mat-card-content>\\r\\n            {{userReview.review}}\\r\\n          </mat-card-content>\\r\\n          Upvotes: {{userReview.upvotesCount}}\\r\\n          <button mat-button color=\\\"primary\\\" (click)=\\\"editMode=true\\\">\\r\\n            Edit\\r\\n          </button>\\r\\n          <button mat-button color=\\\"warn\\\" (click)=\\\"deleteReview()\\\">\\r\\n            Delete\\r\\n          </button>\\r\\n        </mat-card>\\r\\n        <mat-card *ngIf=\\\"(!userReview.review || editMode) && _auth.loggedIn()\\\">\\r\\n          <form [formGroup]=\\\"reviewForm\\\" (submit)=\\\"postReview()\\\">\\r\\n            <mat-form-field>\\r\\n              <textarea label=\\\"review\\\" matInput formControlName=\\\"review\\\"></textarea>\\r\\n              <mat-error *ngIf=\\\"reviewForm.invalid\\\"> A review should at least be 100\\r\\n                character long\\r\\n              </mat-error>\\r\\n            </mat-form-field>\\r\\n            <button mat-button>Post review</button>\\r\\n          </form>\\r\\n        </mat-card>\\r\\n        <mat-card *ngIf=\\\"!(reviews.length || userReview.review)\\\">\\r\\n          No reviews to show\\r\\n        </mat-card>\\r\\n        <mat-card *ngFor=\\\"let review of reviews\\\">\\r\\n          <mat-card-header>\\r\\n            <img [src]=\\\"review.reviewer.picture\\\" [alt]=\\\"review.reviewer.username\\\" width=\\\"40px\\\" height=\\\"40px\\\">\\r\\n            <a [routerLink]=\\\"['/profile',review.reviewer.user]\\\">{{review.reviewer.username}}</a>\\r\\n          </mat-card-header>\\r\\n          <mat-card-content>\\r\\n            {{review.review}}\\r\\n          </mat-card-content>\\r\\n          <mat-card-footer>\\r\\n            Upvotes: {{review.upvotesCount}}\\r\\n            <div *ngIf=\\\"!review.upvoted\\\">\\r\\n              <mat-icon color=\\\"primary\\\" svgIcon=\\\"upvote\\\" (click)=\\\"upVote(review)\\\"></mat-icon>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"review.upvoted\\\">\\r\\n              <mat-icon color=\\\"primary\\\" svgIcon=\\\"upvoted\\\" (click)=\\\"unVote(review)\\\"></mat-icon>\\r\\n            </div>\\r\\n          </mat-card-footer>\\r\\n        </mat-card>\\r\\n      </mat-expansion-panel>\\r\\n    </mat-accordion>\\r\\n    <!--Reviews End -->\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {AnimeService} from '../../services/anime.service';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MatIconRegistry} from '@angular/material';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {AuthService} from '../../services/auth.service';\nimport {AnimelistService} from '../../services/animelist.service';\n\n@Component({\n    selector: 'app-anime',\n    templateUrl: './anime.component.html',\n    styleUrls: ['./anime.component.css']\n})\nexport class AnimeComponent implements OnInit {\n\n    constructor(public _auth: AuthService, private _animelist: AnimelistService, private _anime: AnimeService,\n                private _activatedRoute: ActivatedRoute, private fb: FormBuilder, private matIconRegistry: MatIconRegistry,\n                private domSanitizer: DomSanitizer) {\n        this.matIconRegistry.addSvgIcon('upvoted',\n            this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/baseline-thumb_up_alt-24px.svg'));\n        this.matIconRegistry.addSvgIcon('upvote',\n            this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/outline-thumb_up_alt-24px.svg'));\n        this.matIconRegistry.addSvgIcon('star',\n            this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/baseline-star-24px.svg'));\n        this.matIconRegistry.addSvgIcon('star_outline',\n            this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/baseline-star_border-24px.svg'));\n    }\n\n    reviewForm: FormGroup;\n    anime = {\n        name: '',\n        image: '',\n        description: '',\n        _id: null,\n        status: '',\n        watchedEpisodes: '',\n        score: '',\n        rating: {_id: '', rating: ''}\n    };\n    reviews = [];\n    userReview = {id: '', review: ''};\n    editMode = false;\n\n    ngOnInit() {\n        this.reviewForm = this.fb.group({\n            review: new FormControl(null, {validators: [Validators.required, Validators.minLength(100)]})\n        });\n        this._anime.getAnime(this._activatedRoute.snapshot.paramMap.get('anime')).subscribe(anime => {\n            this.anime = anime;\n            if (!anime.rating) {\n                anime.rating = {};\n            }\n        }, error => console.error(error));\n    }\n\n    Add() {\n        this._animelist.addToList(this.anime._id, 'Plan To Watch').subscribe(() => {\n            this.anime.status = 'Plan To Watch';\n        });\n    }\n\n    Update() {\n        this._animelist.updateList(this.anime._id, this.anime.status, this.anime.watchedEpisodes).subscribe();\n    }\n\n    postReview() {\n        if (!this.userReview.review) {\n            this._anime.postReview(this.anime._id, this.reviewForm.value.review).subscribe(result => {\n                this.editMode = false;\n                this.userReview = result;\n            });\n        } else {\n            this._anime.editReview(this.anime._id, this.userReview.id, this.reviewForm.value.review).subscribe(() => {\n                this.editMode = false;\n                this.userReview.review = this.reviewForm.value.review;\n            });\n        }\n    }\n\n    deleteReview() {\n        this._anime.deleteReview(this.anime._id, this.userReview.id).subscribe(() => {\n            this.editMode = true;\n            this.userReview = {id: '', review: ''};\n            this.reviewForm.reset();\n        });\n    }\n\n    getReviews() {\n        if (!this.reviews.length) {\n            this._anime.getReviews(this.anime._id).subscribe(results => {\n                this.reviews = results.reviews;\n                if (results.userReview) {\n                    this.reviewForm.get('review').patchValue(results.userReview.review);\n                    this.userReview = results.userReview;\n                }\n            });\n        }\n    }\n\n    upVote(review) {\n        this._anime.upvote(this.anime._id, review.id).subscribe(response => {\n            review.upvoted = true;\n            review.upvotesCount = response.upvotesCount;\n        });\n    }\n\n    unVote(review) {\n        this._anime.unvote(this.anime._id, review.id).subscribe(response => {\n            review.upvoted = false;\n            review.upvotesCount = response.upvotesCount;\n        });\n    }\n\n    rateAnime() {\n        if (this.anime.rating._id) {\n            this._anime.changeRating(this.anime._id, this.anime.rating._id, this.anime.rating.rating).subscribe();\n        } else {\n            this._anime.addRating(this.anime._id, this.anime.rating.rating).subscribe();\n        }\n    }\n\n}\n\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYW5pbWVzL2FuaW1lcy5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div fxFlex=\\\"1 1 80%\\\" fxFlex.lt-md=\\\"auto\\\" fxLayout=\\\"column\\\">\\n  <p>\\n    <input (search)=\\\"getAnimes()\\\" [(ngModel)]=\\\"search\\\" matInput placeholder=\\\"Search Anime\\\" type=\\\"search\\\">\\n  </p>\\n\\n  <table (matSortChange)=\\\"sortAnimes($event)\\\" [dataSource]=\\\"allAnimes\\\" class=\\\"mat-elevation-z8\\\" fxFlex mat-table\\n         matSort>\\n\\n    <!-- Anime Start-->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th *matHeaderCellDef mat-header-cell mat-sort-header> Anime</th>\\n      <td *matCellDef=\\\"let anime\\\" mat-cell>\\n        <a [routerLink]=\\\"['/animes',anime._id]\\\">{{anime.name}}</a>\\n      </td>\\n    </ng-container>\\n    <!-- Anime Endt-->\\n\\n    <!-- Score Start-->\\n    <ng-container matColumnDef=\\\"score\\\">\\n      <th *matHeaderCellDef mat-header-cell mat-sort-header> Score</th>\\n      <td *matCellDef=\\\"let anime\\\" mat-cell>\\n        <mat-icon color=\\\"primary\\\" svgIcon=\\\"star\\\"></mat-icon>\\n        {{anime.score}}\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"rating\\\">\\n      <!-- Score End-->\\n\\n      <!-- Rating Start-->\\n      <th *matHeaderCellDef mat-header-cell> Your Rating</th>\\n      <td *matCellDef=\\\"let anime\\\" mat-cell>\\n        <mat-icon *ngIf=\\\"anime.rating.rating != 'N/A'\\\" color=\\\"primary\\\" svgIcon=\\\"star\\\"></mat-icon>\\n        <mat-icon *ngIf=\\\"anime.rating.rating =='N/A'\\\" color=\\\"primary\\\" svgIcon=\\\"star_outline\\\"></mat-icon>\\n        <mat-form-field [ngStyle]=\\\"{'width':'35px'}\\\">\\n          <mat-select (selectionChange)=\\\"rateAnime(anime)\\\" [(ngModel)]=\\\"anime.rating.rating\\\">\\n            <mat-option *ngFor=\\\"let score of [1,2,3,4,5,6,7,8,9,10]\\\" [value]=\\\"score\\\">\\n              {{score}}\\n            </mat-option>\\n          </mat-select>\\n        </mat-form-field>\\n      </td>\\n    </ng-container>\\n    <!-- Rating End-->\\n\\n    <!-- Status Start-->\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th *matHeaderCellDef mat-header-cell> Status</th>\\n      <td *matCellDef=\\\"let anime\\\" fxLayoutAlign=\\\"center\\\" mat-cell>\\n        <button (click)=\\\"Add(anime)\\\" *ngIf=\\\"!anime.status\\\" mat-button>Add</button>\\n        <div *ngIf=\\\"anime.status\\\">\\n          <mat-form-field [ngStyle]=\\\"{'width':'130px'}\\\">\\n            <mat-select [(value)]=\\\"anime.status\\\">\\n              <mat-option value=\\\"Plan To Watch\\\">Plan To Watch</mat-option>\\n              <mat-option value=\\\"Watching\\\">Watching</mat-option>\\n              <mat-option value=\\\"Watched\\\">Watched</mat-option>\\n              <mat-option value=\\\"Dropped\\\">Dropped</mat-option>\\n              <mat-option value=\\\"On Hold\\\">On Hold</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n          <mat-form-field [ngStyle]=\\\"{'width':'45px'}\\\">\\n            <input [(ngModel)]=\\\"anime.watchedEpisodes\\\" [defaultValue]=\\\"anime.watchedEpisodes\\\" [max]=\\\"anime.episodes\\\"\\n                   label=\\\"episodes\\\" matInput\\n                   min=\\\"0\\\" type=\\\"number\\\">\\n          </mat-form-field>\\n          / {{anime.episodes}}\\n          <button (click)=\\\"Update(anime)\\\" mat-button>\\n            Update\\n          </button>\\n        </div>\\n      </td>\\n    </ng-container>\\n    <!-- Status End-->\\n\\n    <tr *matHeaderRowDef=\\\"columnsToDisplay\\\" mat-header-row></tr>\\n    <tr *matRowDef=\\\"let myRowData; columns: columnsToDisplay\\\" mat-row></tr>\\n  </table>\\n  <mat-paginator (page)=\\\"changePage($event)\\\" [length]=\\\"animesCount\\\" [pageIndex]=\\\"pageNumber\\\"\\n                 [pageSizeOptions]=\\\"[1,2,5,10]\\\"\\n                 [pageSize]=\\\"pageSize\\\" class=\\\"mat-elevation-z8\\\"></mat-paginator>\\n</div>\\n\\n\\n\"","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\nimport {AnimeService} from '../../services/anime.service';\nimport {AnimelistService} from '../../services/animelist.service';\nimport {MatIconRegistry, PageEvent} from '@angular/material';\nimport {ActivatedRoute} from '@angular/router';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n\n@Component({\n  selector: 'app-animes',\n  templateUrl: './animes.component.html',\n  styleUrls: ['./animes.component.css']\n})\nexport class AnimesComponent implements OnInit {\n\n  allAnimes = [];\n  search = '';\n  columnsToDisplay = ['name', 'score', 'rating', 'status'];\n  pageSize = 5;\n  pageNumber = 0;\n  animesCount = 0;\n  sortType = 'score';\n  sortOrder = 'desc';\n\n  constructor(private _auth: AuthService, private _route: ActivatedRoute, private _anime: AnimeService, private _animelist: AnimelistService,\n              private matIconRegistry: MatIconRegistry, private domSanitizer: DomSanitizer) {\n    this.matIconRegistry.addSvgIcon('star',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/baseline-star-24px.svg'));\n    this.matIconRegistry.addSvgIcon('star_outline',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/baseline-star_border-24px.svg'));\n  }\n\n  ngOnInit() {\n    this._route.queryParams.subscribe(params => {\n      if (params.page && params.size) {\n        this.pageSize = params.size;\n        this.pageNumber = params.page - 1;\n      }\n      if (params.search) {\n        this.search = params.search;\n      }\n      if (params.sort) {\n        this.sortType = params.sort;\n      }\n      if (['asc', 'desc'].includes(params.order)) {\n        this.sortOrder = params.order;\n      }\n      this.getAnimes();\n    });\n  }\n\n  Add(anime) {\n    this._animelist.addToList(anime._id, 'Plan To Watch').subscribe(() => {\n      anime.status = 'Plan To Watch';\n    });\n  }\n\n  Update(anime) {\n    this._animelist.updateList(anime._id, anime.status, anime.watchedEpisodes).subscribe();\n  }\n\n  changePage(event: PageEvent) {\n    this.pageSize = event.pageSize;\n    this.pageNumber = event.pageIndex;\n    this.getAnimes();\n  }\n\n  sortAnimes(event) {\n    this.sortType = event.active;\n    this.sortOrder = event.direction;\n    this.getAnimes();\n  }\n\n  getAnimes() {\n    this._anime.getAnimes(this.pageSize, this.pageNumber, this.search, this.sortType, this.sortOrder).subscribe(res => {\n      this.allAnimes = res.animes.map(anime => {\n        if (!anime.rating) {\n          anime.rating = {rating: 'N/A'};\n        }\n        return anime;\n      });\n      this.animesCount = res.count;\n    }, err => console.error(err));\n  }\n\n  rateAnime(anime) {\n    if (anime.rating._id) {\n      this._anime.changeRating(anime._id, anime.rating._id, anime.rating.rating).subscribe();\n    } else {\n      this._anime.addRating(anime._id, anime.rating.rating).subscribe();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {CanActivate, Router} from '@angular/router';\nimport {AuthService} from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  constructor(private _auth: AuthService, private _router: Router) {\n  }\n\n  canActivate(): boolean {\n    if (this._auth.isAdmin()) {\n      return true;\n    } else {\n      this._router.navigate(['/']);\n      return false;\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {AnimesComponent} from '../components/animes/animes.component';\r\nimport {AnimeComponent} from '../components/anime/anime.component';\r\nimport {AddAnimeComponent} from '../components/add-anime/add-anime.component';\r\nimport {AdminGuard} from '../guards/admin.guard';\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: AnimesComponent},\r\n  {path: 'addAnime', component: AddAnimeComponent, canActivate: [AdminGuard]},\r\n  {path: ':anime', component: AnimeComponent},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AnimeRoutingModule {\r\n}\r\n","import {AnimesComponent} from '../components/animes/animes.component';\r\nimport {AddAnimeComponent} from '../components/add-anime/add-anime.component';\r\nimport {AnimeComponent} from '../components/anime/anime.component';\r\nimport {NgModule} from '@angular/core';\r\nimport {AngularMaterialModule} from './angular-material.module';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {CommonModule} from '@angular/common';\r\nimport {AnimeRoutingModule} from './anime-routing.module';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AnimesComponent,\r\n    AddAnimeComponent,\r\n    AnimeComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AngularMaterialModule,\r\n    AnimeRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule\r\n  ]\r\n})\r\n\r\nexport class AnimeModule {\r\n}\r\n"],"sourceRoot":""}