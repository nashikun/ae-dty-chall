{"version":3,"sources":["webpack:///./src/app/services/animelist.service.ts","webpack:///./src/app/util/ImageValidator.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {AuthService} from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnimelistService {\n\n  constructor(private http: HttpClient, private _auth: AuthService) {\n  }\n\n  getMyList() {\n    return this.http.get<any>(`https://localhost:3000/users/${this._auth.getId()}/list`);\n  }\n\n  getList(user) {\n    return this.http.get<any>(`https://localhost:3000/users/${user}/list`);\n  }\n\n  addToList(animeId, status) {\n    return this.http.post<any>(`https://localhost:3000/users/${this._auth.getId()}/list`, {\n      id: animeId,\n      status: status\n    });\n  }\n\n  updateList(animeId, status, watchedEpisodes) {\n    return this.http.put<any>(`https://localhost:3000/users/${this._auth.getId()}/list/${animeId}`, {\n      id: animeId,\n      status: status,\n      watchedEpisodes: watchedEpisodes\n    });\n  }\n\n}\n","import {AbstractControl} from '@angular/forms';\r\nimport {Observable, of} from 'rxjs';\r\n\r\nexport const ImageValidator = (control: AbstractControl): Observable<{ [key: string]: any }> => {\r\n  const file = control.value as File;\r\n  if (typeof (file) === 'string') {return of(null); }\r\n  const reader = new FileReader();\r\n  let isValid = false;\r\n  reader.readAsArrayBuffer(file);\r\n  return Observable.create((obs) => {\r\n    reader.addEventListener('loadend', () => {\r\n      let fileHeader = '';\r\n      // @ts-ignore\r\n      const arr = new Uint8Array(reader.result).subarray(0, 4);\r\n      for (let i = 0; i < 4; i++) {\r\n        fileHeader += arr[i].toString(16);\r\n      }\r\n      switch (fileHeader) {\r\n        case '89504e47':\r\n        case 'ffd8ffe0':\r\n        case 'ffd8ffe1':\r\n        case 'ffd8ffe2':\r\n        case 'ffd8ffe3':\r\n        case 'ffd8ffe8':\r\n          isValid = true;\r\n          break;\r\n        default:\r\n          isValid = false;\r\n          break;\r\n      }\r\n      if (isValid) {\r\n        obs.next(null);\r\n      } else {\r\n        obs.next({invalidFormat: true});\r\n      }\r\n      obs.complete();\r\n    });\r\n  });\r\n};\r\n\r\n"],"sourceRoot":""}